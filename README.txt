

Разработка программы распознавания лица или движений с использованием сверточной нейронной сети (CNN)


1.	В среде Spyder (сборка Anaconda) на языке Python 3.х создать проект и подключить библиотеку opencv. 
2.	Из л.р. 1-3 взять модули загрузки цветного цифрового изображения и обработки пикселей. 
3.	Провести информационный поиск в Интернете и дать пошаговое описание работы метода Лукаса-Канаде. 
4.	Подготовить видеопоток с медленно движущимся объектом по горизонтали (не более 2 мин, камера не двигается).
5.	Запрограммировать отслеживание объекта с использованием метода Лукаса-Канаде 
(для этого использовать функцию cv2.calcOpticalFlowPyrLK() из библиотеки opencv).
6.	Сделать перевод разделов III и IV статьи Tracking of Moving Objects With Regeneration of Object Feature Points. 
7.	Подготовить второй видеопоток на основе п. 4 для создания условий потери характерных точек ЛК при движении объекта 
(по аналогии с рис.1-3 из статьи из п. 6). 
8.	Разработать и запрограммировать оригинальный алгоритм регенерации характерных признаков ЛК (по аналогии со статьей из п. 6). 
9.	Провести эксперимент по регенерации характерных признаков ЛК с визуализацией результатов.
 Построить график ошибок первого и второго рода по результатам регенерации. 
10.	Провести эксперимент по отслеживанию объектов с визуализацией результатов
 (в том числе визуализацией применения характерных признаков на изображении).
  Сравнить надежность отслеживания с регенерацией и без нее. 
  Построить график ошибок первого и второго рода по результатам отслеживания объекта. 
11.	Дать комментарий каждой строчке кода! 
12.	Продемонстрировать работу программы преподавателю. 
13.	Подготовить и защитить отчет (титульный лист, задание, теоретическая часть, диаграмма структуры программы,
 блок-схема разработанного алгоритма регенерации, принтскрины интерфейса и основных шагов работы программы, 
 заключение и выводы, листинг программы с комментариями, список использованной литературы). 


Алгоритм Лукаса-Канаде
Алгоритм Лукаса-Канаде — широко используемый в компьютерном зрении дифференциальный локальный метод вычисления оптического потока.
Основное уравнение оптического потока содержит две неизвестных и не может быть однозначно разрешено. 
Алгоритм Лукаса-Канаде обходит неоднозначность за счет использования информации о соседних пикселях в каждой точке. 
Метод основан на предположении, что в локальной окрестности каждого пикселя значение оптического потока одинаково, 
таким образом можно записать основное уравнение оптического потока для всех пикселей окрестности и решить полученную систему уравнений 
методом наименьших квадратов.
Алгоритм Лукаса-Канаде менее чувствителен к шуму на изображениях, чем поточечные методы, 
однако является сугубо локальным и не может определить направление движения пикселей внутри однородных областей.

Методы выделения углов
Для выделения из изображения некоторой интерпретируемой информации необходимо привязаться к локальным особенностям изображения. 
На изображении возможно выделить особые точки. Особая точка m, или точечная особенность (англ. point feature, key point, feature), 
изображения – это точка изображения, окрестность которой o(m) можно отличить от окрестности любой другой точки изображения o(n) 
в некоторой другой окрестности особой точки o2(m). В качестве окрестности точки изображения для большинства алгоритмов берётся прямоугольное окно,
составляющее размер 5x5 пикселей. Процесс определения особых точек достигается путём использования детектора и дескриптора.

Детектор – это метод извлечения особых точек из изображения. Детектор обеспечивает инвариантность нахождения одних и тех же особых точек 
относительно преобразований изображений.

Дескриптор – идентификатор особой точки, выделяющий её из остального множества особых точек. 
В свою очередь, дескрипторы должны обеспечивать инвариантность нахождения соответствия между особыми точками относительно 
преобразований изображений.
 
Результаты работы программы
Программа слежения за движущимся объектом реализована на языке Python 3.
Основная идея заключается в том, чтобы анализировать максимальную скорость точек по объекту (делаем мы это окнами по 40 кадров).
Затем мы анализируем множество точек по объекту и если выходит, что какая-то из точек объекта перестает двигаться 
(более 5 кадров подряд на этапе, когда уже проходит 40 кадров), то мы пытаемся предсказать, 
в каком положении была бы эта точка, если бы двигалась со скоростью всего объекта 
(параллельно с изменением каждой точки мы сохраняем смещение (формальную скорость) и как раз понимаем,
когда точка перестает двигаться (эвклидово расстояние между точками меньше порога)).
  
При этом отметим, что при работе со стандартными библиотеками была замечена проблема возникновения большого числа фантомных точек
 (выделения треков по “хорошим” точкам (определяем по Ши-Томаси [1] аналогично тому, как в статье [2]),
  которые по факту почти не двигаются и связаны со смещением камеры). 
  Такие точки мы выбрасываем ( анализируем, двигалась ли эта точка (какая скорость)).
